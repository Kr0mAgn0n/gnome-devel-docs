%h1
  Keyboard Input

.note
  This is draft content for the next version of 
  %a{:href => 'http://design.gnome.org'} GNOME Human Interface Guidelines.

%p  
  Keyboards are a common input device for those using GNOME 3, so it is important that you design your application with them in mind. The keyboard can be a quick and effective effective input method. Allowing people to use a keyboard instead of a pointing device can save them time and effort and can be convenient for many operations. The keyboard is also important for visually-impaired people or those with mobility impairments.

.important
  Search is an important part of the way that people interact with GNOME 3. Make sure that you are familiar with the search design pattern and follow it wherever it is relevant.

%h2
  Keyboard Navigation

%p
  Ensure that all the functionality provided by your application can be accessed using a keyboard, including toolbars, links and buttons. Trying to use your application only with a keyboard is a great way to test this.

%ul
  %li
    The tab key is the standard way of navigating through a GNOME user interface using the keyboard. Make sure that all the parts of your application can be accessed in this manner.
  %li
    Use a logical keyboard navigation order. When navigating around a window with the Tab key, keyboard focus should move between controls in a predictable order. In Western locales, this is normally left to right and top to bottom.
  %li
    Ensure correct tab order for controls whose enabled state is dependent on check box, radio button or toggle button state. When such a button is selected, all its dependent controls should be enabled, and all the dependent controls of any other button in the group should be disabled. When the user selects a check box, radio button or toggle button that has dependent controls, do not automatically give focus to the first dependent control, but instead leave the focus on the button.

%h2
  Access Keys
%p
  Access keys allow someone to operate labelled controls by using the Alt modifier key.

%ul
  %li
    Give all labelled components an access key (underlined letter), with the exception of toolbar controls which would use up too many access key combinations.
  %li
    Choose access keys to be as easy to remember as possible. Normally, this means using the first letter of the label. However, in complex windows, the choice can become more difficult. Here are some simple rules:
  %li
    Assign access keys to the most frequently-used controls first. If it's not clear which controls will be the most frequently used, assign access keys from left to right, top to bottom (for Western locales).
  %li
    Use the first letter of the label, or of one of its other words if it has more than one. If another letter provides a better association (e.g. "x" in Extra Large) however, consider using that letter instead.
  %li
    If the first letter is not available, choose an easy to remember consonant from the label, for example, "p" in Replace.
  %li
    If no such consonants are available, choose any available vowel from the label.
  %li
    If duplication of access keys in a window is unavoidable, you should still refrain from duplicating the access keys for any of these buttons that appear in the same window: OK, Cancel, Close, Apply or Help.
  %li
    It is better not to assign access keys to "thin" letters (such as lowercase i or l), or letters with descenders (such as lowercase g or y) unless it is unavoidable. The underline does not show up very well on those characters in some fonts.
  %li
    Applications using a non-Roman writing system in conjunction with a standard keyboard can have control labels prefixed with Roman characters as access keys.

%h2
  Shortcut Keys

%p
  Shortcut keys are a good way to provide quick and convenient access to common operations. Be sure to use the standard GNOME shortcut keys (see below) if your application supports those functions. This ensures consistency between GNOME applications and aids discoverability.

%p
  Guidance on assigning your own shortcut keys:

%ul
  %li
    Try and be consistent with other GNOME applications, particularly the core applications, and take the time to find out what shortcut keys they have defined.
  %li
    Only assign shortcut keys to the most commonly-used actions in your application. Do not try to assign a shortcut keys to everything.
  %li
    Do not use any of the standard GNOME shortcut keys for your own purposes, even if your application doesn't support those functions. This helps reinforce consistency between all GNOME applications.
  %li
    Use Ctrl+letter in preference to other combinations when choosing new shortcut keys and Shift+Ctrl+letter for functions that reverse or extend another function. For example, Ctrl+Z and Shift+Ctrl+Z for Undo and Redo.
  %li
    Choose new shortcut keys to be as mnemonic as possible, as these will be easier to learn and remember. For example, Ctrl+E would be a good shortcut for a menu item called Edit Page.
  %li
    Shortcuts that can be easily used with one hand are preferable for common operations, but try not to assign awkward reaches for shortcuts that may be frequently used.
  %li
    Do not use Alt+key combinations for shortcut keys, as these may conflict with window manager shortcuts or access keys.

%h2
  Standard GNOME Shortcut Keys

%p
  Include these where you can:

%table
  %tr
    %th
      Function
    %th
      Shortcut
    %th
      Description
  %tr
    %td
      New
    %td
      %span.shortcut
        Ctrl+N
    %td
      Create a new document
  %tr
    %td
      Open
    %td
      %span.shortcut
        Ctrl+O
    %td
      Open a document
  %tr
    %td
      Save
    %td
      %span.shortcut
        Ctrl+S
    %td
      Save the current document
  %tr
    %td
      …
    %td
      %span.shortcut
        Ctrl+…
    %td
      …

%h2
  System Reserved Shortcut Keys
%p
  These ones are ours.

%table
  %tr
    %th
      Function
    %th
      Shortcut
    %th
      Description
  %tr
    %td
      …
    %td
      …
    %td
      …


%h2
  Comments

%ul
  %li
    Other prominent shortcuts that should be mentioned here: F11 - fullscreen, Ctrl-X/Ctrl-C/Ctrl-V for cut/copy/paste 
  %li
    I'd really like to see some guidance on global shortcuts here - people have a tendency to write small things that hide in the statusbar and install global shortcuts to make something happen. We should really advise against that, since global shortcuts are a scarce resource. If a global shortcut is needed at all, it '''must''' be coordinated with the rest of the system by integrating in the keyboard shortcuts control-center functionality.
